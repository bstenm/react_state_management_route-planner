{"version":3,"sources":["config/index.js","services/Log.js","hoc/GoogleMapApiLoader/index.js","hoc/GoogleMapApiLoader/GoogleMapApiLoaderContainer.js","components/Map/MapContainer.js","components/Map/index.js","actions/waypoints.js","config/action-types.js","components/LeafletApiLoader/index.js","components/LeafletApiLoader/LeafletApiLoaderContainer.js","components/WaypointItem/index.js","components/WaypointItem/WaypointItem.js","components/WaypointList/WaypointList.js","components/WaypointList/WaypointListContainer.js","components/WaypointList/index.js","components/GeoJsonDataProvider/index.js","components/WaypointPanelHeader/WaypointPanelHeader.js","components/WaypointPanelHeader/index.js","components/WaypointPanelHeader/WaypointPanelHeaderContainer.js","components/WaypointPanel/index.js","components/WaypointPanel/WaypointPanel.js","components/App/index.js","components/App/App.js","reducers/index.js","reducers/waypointList.js","store.js","index.js"],"names":["config","mapLib","js","endPoint","integrity","css","tileLayer","id","url","maxZoom","attribution","googleMapApi","version","zoom","latitude","longitude","mapIconSize","polyLineColor","polylineWeight","console","Component","WrappedComponent","_React$Component","Wrapper","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","buildUrl","_cf$googleMapApi","cf","params","key","process","v","libraries","paramStr","keys","filter","k","map","concat","join","state","googleMap","googleMapError","inherits","createClass","value","_this2","loadjs","success","setState","window","google","maps","error","log","assign","react_default","a","createElement","React","MapContainer","_getPrototypeOf2","_len","arguments","length","args","Array","_key","apply","initialiseMap","Leaflet","rest","objectWithoutProperties","node","setView","objectSpread","accessToken","addTo","on","e","getElevationData","latlng","addWaypoint","cb","lat","lng","ElevationService","getElevationForLocations","locations","results","status","el","payload","elevation","updateMapMarkers","latlngs","markers","_this$props","waypointList","updateGeoJsonData","markerGroup","clearLayers","forEach","coords","idx","blackDot","divIcon","className","iconSize","html","marker","icon","draggable","_e$target$_latlng","target","_latlng","data","updateWaypoint","push","layerGroup","polyline","color","weight","addLayer","toGeoJSON","prevProps","_this$props2","JSON","stringify","_this$props3","leafletError","Fragment","ref","defaultProps","connect","_ref","type","GoogleMapApiLoader","LeafletApiLoaderContainer","_cf$mapLib","async","before","path","scriptEl","crossOrigin","L","children","remove","onDragStart","draggedOn","classNames","title","onClick","onKeyDown","role","tabIndex","WaypointList","removeWaypoint","onDrop","onDragOver","draggedOnId","_ref2","slicedToArray","components_WaypointItem","WaypointListContainer","dataTransfer","setData","preventDefault","dropEffect","parseInt","draggedId","getData","droppedOnId","sortWaypoints","components_WaypointList_WaypointList","GeoJsonDataContext","createContext","GeoJsonDataProvider","geoJsonData","Provider","WaypointPanelHeader","isEmpty","features","href","encodeURIComponent","togpx","download","Consumer","components_WaypointPanelHeader_WaypointPanelHeader","components_WaypointPanelHeader","components_WaypointList","GeoJsonDataProvider_GeoJsonDataProvider","LeafletApiLoader","context","Map","components_WaypointPanel","combineReducers","undefined","listClone","toConsumableArray","_listClone$splice","splice","draggedItem","composedEnhancers","compose","applyMiddleware","store","createStore","reducers","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.5271d786.chunk.js","sourcesContent":["const mapLib = {\n      js: {\n            endPoint: 'https://unpkg.com/leaflet@1.3.4/dist/leaflet.js',\n            integrity:\n                  'sha512-nMMmRyTVoLYqjP9hrbed9S+FzjZHW5gY1TWCHA5ckwXZBadntCNs8kEqAWdrb9O7rxbCaA4lKTIWjDXZxflOcA==',\n      },\n      css: {\n            endPoint: 'https://unpkg.com/leaflet@1.3.4/dist/leaflet.css',\n            integrity:\n                  'sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA==',\n      },\n};\n\nconst tileLayer = {\n      id: 'mapbox.outdoors',\n      url: 'https://a.tile.hosted.thunderforest.com/komoot-2/{z}/{x}/{y}.png',\n      maxZoom: 18,\n      attribution:\n            'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n};\n\nconst googleMapApi = {\n      url: 'https://maps.googleapis.com/maps/api/js',\n      version: 3.36,\n};\n\nexport default {\n      mapLib,\n      tileLayer,\n      googleMapApi,\n      zoom: 11,\n      latitude: 47.6,\n      longitude: 10.8,\n      mapIconSize: [20, 20],\n      polyLineColor: '#007ed3',\n      polylineWeight: 4,\n};\n","export default console;\n","import Component from './GoogleMapApiLoaderContainer';\n\nexport default Component;\n","import React from 'react';\nimport loadjs from 'loadjs';\nimport cf from '../../config/index';\nimport log from '../../services/Log';\n\nexport const wrapper = WrappedComponent => {\n      class Wrapper extends React.Component {\n            constructor(props) {\n                  super(props);\n                  this.state = {\n                        googleMap: null,\n                        googleMapError: null,\n                  };\n            }\n\n            componentDidMount() {\n                  loadjs(this.buildUrl(), {\n                        success: () => {\n                              this.setState({\n                                    googleMap: window.google.maps,\n                                    googleMapError: null,\n                              });\n                        },\n                        error: () => {\n                              const googleMapError =\n                                    'Could not load the Google Elevation Service';\n                              log.error(googleMapError);\n                              this.setState({\n                                    googleMapError,\n                                    googleMap: null,\n                              });\n                        },\n                  });\n            }\n\n            buildUrl = () => {\n                  const { url, version } = cf.googleMapApi;\n                  const params = {\n                        key: process.env.REACT_APP_GOOGLE_MAP_API,\n                        v: version,\n                        libraries: 'places',\n                  };\n                  const paramStr = Object.keys(params)\n                        .filter(k => !!params[k])\n                        .map(k => `${k}=${params[k]}`)\n                        .join('&');\n                  return `${url}?${paramStr}`;\n            };\n\n            render() {\n                  const props = Object.assign({}, this.props, this.state);\n                  return <WrappedComponent {...props} />;\n            }\n      }\n\n      return Wrapper;\n};\n\nexport default wrapper;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport cf from '../../config';\nimport GoogleMapApiLoader from '../../hoc/GoogleMapApiLoader';\nimport { addWaypoint, updateWaypoint } from '../../actions/waypoints';\nimport './MapContainer.css';\n\nexport class MapContainer extends React.Component {\n      componentDidUpdate(prevProps) {\n            const { Leaflet, googleMap, waypointList } = this.props;\n\n            // initialse the map once the Leaflet and Google map libs have been loaded\n            if (\n                  !this.error &&\n                  Leaflet &&\n                  googleMap &&\n                  (prevProps.Leaflet !== Leaflet ||\n                        prevProps.googleMap !== googleMap)\n            ) {\n                  this.initialiseMap();\n                  return;\n            }\n\n            // update markers only if waypoint list has been updated\n            if (\n                  JSON.stringify(waypointList) !==\n                  JSON.stringify(prevProps.waypointList)\n            ) {\n                  this.updateMapMarkers();\n            }\n      }\n\n      initialiseMap = () => {\n            const { Leaflet } = this.props;\n            const { latitude, longitude, zoom, tileLayer } = cf;\n            const { url, ...rest } = tileLayer;\n\n            // display map\n            this.map = Leaflet.map(this.node);\n            this.map.setView([latitude, longitude], zoom);\n\n            // use tile layer from Mapbox (https://www.mapbox.com)\n            Leaflet.tileLayer(url, {\n                  ...rest,\n                  accessToken: process.env.REACT_APP_MAPBOX_ACCESS_TOKEN,\n            }).addTo(this.map);\n\n            this.map.on('click', e => {\n                  // add waypoint with lat, lng, elevation\n                  this.getElevationData(e.latlng, this.props.addWaypoint);\n            });\n      };\n\n      getElevationData = (latlng, cb) => {\n            const { lat, lng } = latlng;\n            const { googleMap } = this.props;\n\n            // get elevation data for this waypoint\n            new googleMap.ElevationService().getElevationForLocations(\n                  {\n                        locations: [latlng],\n                  },\n                  (results, status) => {\n                        let el;\n                        let payload = [lat, lng];\n\n                        // fail silently\n                        if (status === 'OK' && results[0]) {\n                              el = results[0].elevation;\n                              payload = [lat, lng, el];\n                        }\n\n                        cb(payload);\n                  },\n            );\n      };\n\n      updateMapMarkers = () => {\n            const latlngs = [];\n            const markers = [];\n            const { Leaflet, waypointList, updateGeoJsonData } = this.props;\n\n            // clear all markers before re-adding the waypoints\n            // we get from the redux store (no performance\n            // issue noticed even with one hundred markers)\n            if (this.markerGroup) {\n                  this.markerGroup.clearLayers();\n            }\n\n            // re-add all the waypoints set in the redux store\n            waypointList.forEach((coords, idx) => {\n                  const blackDot = Leaflet.divIcon({\n                        className: 'black-dot',\n                        iconSize: cf.mapIconSize,\n                        html: idx + 1,\n                  });\n\n                  // create a new Leaflet marker\n                  const marker = Leaflet.marker(coords, {\n                        icon: blackDot,\n                        draggable: true,\n                  });\n\n                  // update waypoint data on marker drag and drop\n                  marker.on('dragend', e => {\n                        // eslint-disable-next-line no-underscore-dangle\n                        const { lat, lng } = e.target._latlng;\n                        this.getElevationData({ lat, lng }, data => {\n                              this.props.updateWaypoint({ idx, data });\n                        });\n                  });\n\n                  // push into array to enable creation of a layer group\n                  markers.push(marker);\n                  latlngs.push(coords);\n            });\n\n            // defining a layer group allows us to clear all markers easily\n            this.markerGroup = Leaflet.layerGroup(markers);\n\n            // add a polyline between each marker if more than one\n            if (latlngs.length > 1) {\n                  const polyline = Leaflet.polyline(latlngs, {\n                        color: cf.polyLineColor,\n                        weight: cf.polylineWeight,\n                  });\n                  this.markerGroup.addLayer(polyline);\n            }\n\n            this.markerGroup.addTo(this.map);\n\n            // from react context\n            updateGeoJsonData(this.markerGroup.toGeoJSON());\n      };\n\n      render() {\n            const { leafletError, googleMapError } = this.props;\n            const error = leafletError || googleMapError;\n            return (\n                  <div className=\"MapContainer\">\n                        {error ? (\n                              <span className=\"MapContainer__error\">\n                                    {error} :(\n                              </span>\n                        ) : (\n                              <>\n                                    <div\n                                          ref={node => {\n                                                this.node = node;\n                                          }}\n                                          className=\"MapContainer__map\"\n                                    />\n                                    <div className=\"MapContainer__loader\" />\n                              </>\n                        )}\n                  </div>\n            );\n      }\n}\n\nMapContainer.defaultProps = {\n      Leaflet: null,\n      googleMap: null,\n      leafletError: null,\n      googleMapError: null,\n      waypointList: [],\n};\n\nMapContainer.propTypes = {\n      Leaflet: PropTypes.object,\n      leafletError: PropTypes.string,\n      googleMapError: PropTypes.string,\n      googleMap: PropTypes.object,\n      waypointList: PropTypes.array,\n      addWaypoint: PropTypes.func.isRequired,\n      updateWaypoint: PropTypes.func.isRequired,\n      updateGeoJsonData: PropTypes.func.isRequired,\n};\n\nexport default connect(\n      ({ waypointList }) => ({ waypointList }),\n      { addWaypoint, updateWaypoint },\n)(GoogleMapApiLoader(MapContainer));\n","import Component from './MapContainer';\n\nexport default Component;\n","/* eslint-disable import/prefer-default-export */\nimport {\n      ADD_WAYPOINT,\n      REMOVE_WAYPOINT,\n      SORT_WAYPOINTS,\n      UPDATE_WAYPOINT,\n} from '../config/action-types';\n\nexport const addWaypoint = payload => ({\n      type: ADD_WAYPOINT,\n      payload,\n});\n\nexport const removeWaypoint = payload => ({\n      type: REMOVE_WAYPOINT,\n      payload,\n});\n\nexport const sortWaypoints = payload => ({\n      type: SORT_WAYPOINTS,\n      payload,\n});\n\nexport const updateWaypoint = payload => ({\n      type: UPDATE_WAYPOINT,\n      payload,\n});\n","// eslint-disable-next-line import/prefer-default-export\nexport const ADD_WAYPOINT = 'ADD_WAYPOINT';\nexport const SORT_WAYPOINTS = 'SORT_WAYPOINTS';\nexport const UPDATE_WAYPOINT = 'UPDATE_WAYPOINT';\nexport const REMOVE_WAYPOINT = 'REMOVE_WAYPOINT';\n","import Component from './LeafletApiLoaderContainer';\n\nexport default Component;\n","import React from 'react';\nimport loadjs from 'loadjs';\nimport PropTypes from 'prop-types';\nimport cf from '../../config';\nimport log from '../../services/Log';\n\nexport class LeafletApiLoaderContainer extends React.Component {\n      state = {\n            Leaflet: null,\n            leafletError: null,\n      };\n\n      componentDidMount() {\n            const { js, css } = cf.mapLib;\n            loadjs([css.endPoint, js.endPoint], {\n                  // fetch in parallel and load them in series\n                  async: false,\n                  // add integrity and crossorigin attributes\n                  before: (path, scriptEl) => {\n                        scriptEl.crossOrigin = '';\n                        if (path === js.endPoint) {\n                              scriptEl.integrity = js.integrity;\n                        }\n                        if (path === css.endPoint) {\n                              scriptEl.integrity = css.integrity;\n                        }\n                  },\n                  // get the map api from the window on success\n                  success: () => {\n                        this.setState({\n                              Leaflet: window.L,\n                              leafletError: null,\n                        });\n                  },\n                  error: () => {\n                        const leafletError = 'Could not load the map';\n                        log.error(leafletError);\n                        this.setState({\n                              leafletError,\n                              Leaflet: null,\n                        });\n                  },\n            });\n      }\n\n      render() {\n            return this.props.children(this.state);\n      }\n}\n\nLeafletApiLoaderContainer.propTypes = {\n      children: PropTypes.func.isRequired,\n};\n\nexport default LeafletApiLoaderContainer;\n","import Component from './WaypointItem';\n\nexport default Component;\n","import './WaypointItem.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst WaypointItem = ({ id, remove, onDragStart, draggedOn }) => (\n      <li\n            id={id}\n            draggable=\"true\"\n            onDragStart={onDragStart}\n            className={classNames('WaypointItem', { draggedOn })}\n      >\n            <i className=\"fas fa-arrows-alt\" title=\"move\" />\n            Waypoint {id + 1}\n            <i\n                  title=\"remove\"\n                  className=\"fas fa-trash-alt pull-right\"\n                  onClick={() => remove(id)}\n                  // accessibility\n                  onKeyDown={() => remove(id)}\n                  // accessibility\n                  role=\"button\"\n                  // accessibility\n                  tabIndex=\"0\"\n            />\n      </li>\n);\n\nWaypointItem.propTypes = {\n      id: PropTypes.number.isRequired,\n      remove: PropTypes.func.isRequired,\n      draggedOn: PropTypes.bool.isRequired,\n      onDragStart: PropTypes.func.isRequired,\n};\n\nexport default WaypointItem;\n","import './WaypointList.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport WaypointItem from '../WaypointItem';\n\nconst WaypointList = ({\n      waypointList,\n      removeWaypoint,\n      onDrop,\n      onDragOver,\n      onDragStart,\n      draggedOnId,\n}) => (\n      <div onDrop={onDrop} onDragOver={onDragOver} className=\"WaypointList\">\n            {waypointList.length ? (\n                  <ul>\n                        {waypointList.map(([lat], idx) => (\n                              <WaypointItem\n                                    id={idx}\n                                    key={lat}\n                                    remove={removeWaypoint}\n                                    onDragStart={onDragStart}\n                                    draggedOn={draggedOnId === idx}\n                              />\n                        ))}\n                  </ul>\n            ) : (\n                  <div className=\"guidelines\">\n                        Click on the map to add waypoints to your itinerary\n                  </div>\n            )}\n      </div>\n);\n\nWaypointList.defaultProps = {\n      waypointList: [],\n      draggedOnId: null,\n};\n\nWaypointList.propTypes = {\n      onDrop: PropTypes.func.isRequired,\n      onDragOver: PropTypes.func.isRequired,\n      draggedOnId: PropTypes.number,\n      onDragStart: PropTypes.func.isRequired,\n      waypointList: PropTypes.array,\n      removeWaypoint: PropTypes.func.isRequired,\n};\n\nexport default WaypointList;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport WaypointList from './WaypointList';\nimport { removeWaypoint, sortWaypoints } from '../../actions/waypoints';\n\nexport class WaypointListContainer extends React.Component {\n      state = { draggedOnId: null };\n\n      onDragStart = e => {\n            e.dataTransfer.setData('text/plain', e.target.id);\n      };\n\n      onDragOver = e => {\n            e.preventDefault();\n            e.dataTransfer.dropEffect = 'move';\n\n            // the id for the item being dragged on is set to last item if\n            // dragging inside dropzone but outside the waypoint list\n            let { id } = e.target;\n            id = id || id === '0' ? id : this.props.waypointList.length - 1;\n            id = parseInt(id, 10);\n\n            if (this.state.draggedOnId !== id) {\n                  this.setState({ draggedOnId: id });\n            }\n      };\n\n      onDrop = e => {\n            e.preventDefault();\n\n            this.setState({ draggedOnId: null });\n\n            const draggedId = e.dataTransfer.getData('text/plain');\n\n            // the id of the item on which we drop the dragged item.\n            // if dropping outside the list we simulate dropping on last item\n            const droppedOnId =\n                  e.target.id || this.props.waypointList.length - 1;\n\n            // do nothing if we drop item into itself\n            if (draggedId === droppedOnId) return;\n\n            // dispatch action\n            this.props.sortWaypoints({ draggedId, droppedOnId });\n      };\n\n      render() {\n            return (\n                  <WaypointList\n                        waypointList={this.props.waypointList}\n                        removeWaypoint={this.props.removeWaypoint}\n                        draggedOnId={this.state.draggedOnId}\n                        onDragOver={this.onDragOver}\n                        onDragStart={this.onDragStart}\n                        onDrop={this.onDrop}\n                  />\n            );\n      }\n}\n\nWaypointListContainer.defaultProps = {\n      waypointList: [],\n};\n\nWaypointListContainer.propTypes = {\n      waypointList: PropTypes.arrayOf(PropTypes.array.isRequired),\n      sortWaypoints: PropTypes.func.isRequired,\n      removeWaypoint: PropTypes.func.isRequired,\n};\n\nexport default connect(\n      ({ waypointList }) => ({ waypointList }),\n      { removeWaypoint, sortWaypoints },\n)(WaypointListContainer);\n","import Component from './WaypointListContainer';\n\nexport default Component;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const GeoJsonDataContext = React.createContext({});\n\nexport default class GeoJsonDataProvider extends React.Component {\n      state = { geoJsonData: {} };\n\n      updateGeoJsonData = geoJsonData => {\n            this.setState(() => ({ geoJsonData }));\n      };\n\n      render() {\n            return (\n                  <GeoJsonDataContext.Provider\n                        value={{\n                              ...this.state,\n                              updateGeoJsonData: this.updateGeoJsonData,\n                        }}\n                  >\n                        {this.props.children}\n                  </GeoJsonDataContext.Provider>\n            );\n      }\n}\n\nGeoJsonDataProvider.propTypes = {\n      children: PropTypes.array.isRequired,\n};\n","import './WaypointPanelHeader.css';\nimport togpx from 'togpx';\nimport React from 'react';\nimport isEmpty from 'lodash/isEmpty';\nimport PropTypes from 'prop-types';\n\nconst WaypointPanelHeader = ({ geoJsonData }) => (\n      <div className=\"WaypointPanelHeader\">\n            Route Builder\n            {!isEmpty(geoJsonData) && !isEmpty(geoJsonData.features) && (\n                  <a\n                        href={`data:text/xml;charset=utf-8,${encodeURIComponent(\n                              togpx(geoJsonData),\n                        )}`}\n                        download=\"route.xml\"\n                        title=\"download gpx\"\n                  >\n                        <i className=\"fa fa-download download-btn\" />\n                  </a>\n            )}\n      </div>\n);\n\nWaypointPanelHeader.propTypes = {\n      geoJsonData: PropTypes.object.isRequired,\n};\n\nexport default WaypointPanelHeader;\n","import Component from './WaypointPanelHeaderContainer';\n\nexport default Component;\n","import React from 'react';\nimport { GeoJsonDataContext } from '../GeoJsonDataProvider';\nimport WaypointPanelHeader from './WaypointPanelHeader';\n\nconst WaypointPanelHeaderContainer = () => (\n      <GeoJsonDataContext.Consumer>\n            {({ geoJsonData }) => (\n                  <WaypointPanelHeader geoJsonData={geoJsonData} />\n            )}\n      </GeoJsonDataContext.Consumer>\n);\n\nexport default WaypointPanelHeaderContainer;\n","import Component from './WaypointPanel';\n\nexport default Component;\n","import './WaypointPanel.css';\nimport React from 'react';\nimport WaypointList from '../WaypointList';\nimport WaypointPanelHeader from '../WaypointPanelHeader';\n\nconst WaypointPanel = () => (\n      <div className=\"WaypointPanel\">\n            <WaypointPanelHeader />\n            <WaypointList />\n      </div>\n);\n\nexport default WaypointPanel;\n","import Component from './App';\n\nexport default Component;\n","import React from 'react';\nimport './App.css';\nimport Map from '../Map';\nimport LeafletApiLoader from '../LeafletApiLoader';\nimport WaypointPanel from '../WaypointPanel';\nimport GeoJsonDataProvider, {\n      GeoJsonDataContext,\n} from '../GeoJsonDataProvider';\n\nconst App = () => (\n      <div className=\"App\">\n            <GeoJsonDataProvider>\n                  <LeafletApiLoader>\n                        {props => (\n                              <GeoJsonDataContext.Consumer>\n                                    {context => (\n                                          <Map\n                                                {...props}\n                                                updateGeoJsonData={\n                                                      context.updateGeoJsonData\n                                                }\n                                          />\n                                    )}\n                              </GeoJsonDataContext.Consumer>\n                        )}\n                  </LeafletApiLoader>\n                  <WaypointPanel />\n            </GeoJsonDataProvider>\n      </div>\n);\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport waypointsReducer from './waypointList';\n\nexport default combineReducers({\n      waypointList: waypointsReducer,\n});\n","import {\n      ADD_WAYPOINT,\n      REMOVE_WAYPOINT,\n      SORT_WAYPOINTS,\n      UPDATE_WAYPOINT,\n} from '../config/action-types';\n\nexport default (state = [], { type, payload }) => {\n      switch (type) {\n            case ADD_WAYPOINT: {\n                  return state.concat([payload]);\n            }\n\n            case REMOVE_WAYPOINT: {\n                  return state.filter((e, idx) => idx !== payload);\n            }\n\n            case SORT_WAYPOINTS: {\n                  const { draggedId, droppedOnId } = payload;\n                  // clone original list\n                  const listClone = [...state];\n                  // remove the dragged item\n                  const [draggedItem] = listClone.splice(draggedId, 1);\n                  // before adding it again at the index on which it was dropped\n                  listClone.splice(droppedOnId, 0, draggedItem);\n                  return listClone;\n            }\n\n            case UPDATE_WAYPOINT: {\n                  const { idx, data } = payload;\n                  // clone original list\n                  const listClone = [...state];\n                  // remove the original data\n                  listClone.splice(idx, 1);\n                  // before adding the new data\n                  listClone.splice(idx, 0, data);\n                  return listClone;\n            }\n\n            default:\n                  return state;\n      }\n};\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport reducers from './reducers';\n\nconst initialState = {};\nconst enhancers = [];\nconst middlewares = [];\n\nif (process.env.NODE_ENV === 'development') {\n      // eslint-disable-next-line no-underscore-dangle\n      const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__;\n\n      if (typeof devToolsExtension === 'function') {\n            enhancers.push(devToolsExtension());\n      }\n}\n\nconst composedEnhancers = compose(\n      applyMiddleware(...middlewares),\n      ...enhancers,\n);\n\nconst store = createStore(reducers, initialState, composedEnhancers);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport store from './store';\n\nReactDOM.render(\n      <Provider store={store}>\n            <App />\n      </Provider>,\n      document.getElementById('root'),\n);\n"],"sourceRoot":""}